apiVersion: apps/v1
kind: Deployment

metadata:
  name: {{ include "backend.fullname" . }}
  namespace: {{ .Values.namespace }}

spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "backend.selectorLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8002'
    spec:
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}-{{ .Release.Name }}
      serviceAccountName: serviceaccount-{{ .Release.Name }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.image.name }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: liveliness-port
              containerPort: 8000
              hostPort: 80
          livenessProbe:
            httpGet:
              path: /v1/redishealth
              port: liveliness-port
            initialDelaySeconds: 80
            periodSeconds: 3
          readinessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 80
            periodSeconds: 10
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: DB_HOST
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: DB_USER
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: DB_PASS
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: DB_PORT
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: DB_NAME
            - name: BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: BUCKET_NAME
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: AWS_ACCESS_KEY_ID
            - name: SECRET_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: SECRET_ACCESS_KEY_ID
            - name: redisPass
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: redisPass
            - name: redisHost
              value: {{ .Release.Name }}-redis.default

            - name: redisPort
              value: {{ .Values.redisport | quote}}

      initContainers:
        - name: init-migrations
          image: {{ .Values.image.name }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: DB_HOST
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: DB_USER
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: DB_PASS
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: DB_PORT
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbsecret.name }}-{{ .Release.Name}}
                  key: DB_NAME
          command: ['sh', '-c', 'python ./recipe_management/manage.py migrate && sleep 2']

        - name: init-redis
          image: {{ .Values.initContainers.name }}
          command:
#            - 'sh'
#            - '-c'
#            - >
#              until redis-cli -h {{.Release.Name}}-redis.default -p {{ .Values.redisport }} -a {{ .Values.redis.password }} PING;
#                do echo waiting for redis;
#                sleep 2;
#              done;
            - 'sh'
            - '-c'
            - >
              until nslookup {{ .Release.Name }}-redis.default ;
                do echo waiting for Redis;
                sleep 2;
              done;
